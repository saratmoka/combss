"""
combss.linear.py

This public module contains a user-friendly interface for using the model class to conduct best 
subset selection via continuous optimisation, as proposed in the original paper Moka et al. (2024).

All optimisation logic is handled in the private _opt_lm.py module.
"""

import combss._opt_lm as olm


class model:
    """
        Model is a class implementation that enables users to run COMBSS, a continuous optimisation
        method toward best subset selection in Python. Model contains the following method:
        - fit
        
        and attributes
        - subset
        - mse
        - coef_
        - lambda_
        - run_time
        - subset_list
        - lambda_list
    """
    def __init__(self):
        """
        The class object that creates a model useful for fitting high-dimensional data to obtain a sparse subset of predictors,
        optimised via COMBSS.
        """
        self.subset = None
        self.mse = None
        self.coef_ = None
        self.lambda_ = None
        self.run_time = None
        self.subset_list = None
        self.lambda_list = None
        
    def fit(self, X_train, y_train, X_val, y_val, # Training and validation datasets
                q = None,           # maximum subset size
                nlam = 50,          # number of values in the lambda grid
                t_init= [],         # Initial t vector
                scaling=True,       # If True, the training data is scaled 
                tau=0.5,            # tau parameter
                delta_frac=1,       # delta_frac = n/delta
                eta=0.001,          # Truncation parameter
                patience=10,        # Patience period for termination 
                gd_maxiter=1000,    # Maximum number of iterations allowed by GD
                gd_tol=1e-5,        # Tolerance of GD
                cg_maxiter=None,    # Maximum number of iterations allowed by CG
                cg_tol=1e-5):
        
        """ 
        Fits the data to select a best subset of covariates from the list of subsets generated by COMBSS with 
        SubsetMapV1 as proposed in the original paper Moka et al. (2024) over a grid of dynamically generated 
        lambdas. The fit function calls the bss function.
            
        Parameters
        ----------
        X_train : array-like of shape (n_train, n_covariates)
            The design matrix used for training, where `n_train` is the number of samples 
            in the training data and `n_covariates` is the number of covariates measured in each sample.

        y_train : array-like of shape (n_train)
            The response data used for training, where `n_train` is the number of samples in the training data.

        X_val : array-like of shape (n_val, p)
            The design matrix used for validation to best possible model from the set of models obtained over the dynamic grid of lambda values, 
            where `n_val` is the number of samples in the val data and `p` is the number of covariates measured in each sample.
    
        y_val : array-like of shape (n_val)
            The response data used for validation, where `n_val` is the number of samples in the validation data.    

        q : int
            The maximum subset size of interest. If q is not provided, it is taken to be the lesser value between 
            n, the number of observations in X_train, and p, the number or predictors in X_train.
            Default value = min(n,p).

        nlam : int
            The number of lambdas explored in the dynamic grid.
            Default value = 50.

        t_init : array-like of floats
            The initial value of t passed into Adam optimiser.
            Default value = [0.5, 0.5., ....., 0.5] (i.e, center of the hyper-cube [0, 1]^n_covariates).

        scaling : bool
            Determines whether or not feature scaling is applied for optimisation.
            Default value = True.

        tau : float
            The cutoff value for t that signifies its selection of covariates. 
            If t[i] > tau, the ith covariate is selected. 
            If t[i] < tau, the ith covariate is not selected.
            Default value = 0.5.

        delta_frac : float
            The value of n_train/delta as found in the objective function for COMBSS.
            Default value = 1.

        eta : float
            The parameter that dictates the upper limit used for truncating t elements during the optimisation.
            If the value of t[i] is less than eta, t[i] will be mapped to zero,
            and the ith column of X will be removed to improve algorithm perfomance.
            Default value = 0.

        patience : int
            The integer that specifies how many consecutive times the termination condiiton has to be satisfied
            before the Adam optimzer terminates.
            Default value = 10.

        gd_maxiter : int
            The maximum number of iterations for Adam before the algorithm terminates.
            Default value = 1000.

        gd_tol : float
            The acceptable tolerance used for the termination condition in Adam.
            Default value = 1e-5.

        cg_maxiter : int
            The maximum number of iterations for the conjugate gradient algortihm.
            Default value = n_train.

        cg_tol : float
            The acceptable tolerance used for the termination condition in the conjugate gradient 
            algortihms.
            Default value = 1e-5.


        After fitting
        -------------
        Once fitting is performed as previously demonstrated, each attribute can be directly accessed by running 
        {\sf combss.$<$attribute$>$}. For example, the final optimal subset can be obtained by calling {\sf combss.subset}. 
        The list of attributes for the model class is as follows,

        subset : array-like of integers
            The indices of the optimal subset of predictors chosen 
            from all the subsets selected by COMBSS over the dynamic grid of lambdas, 

        mse : float
            The mean squared error on the validation data corresponds to the subset_opt.

        coef_ : array-like of floats  
            Represents estimates of coefficients for linear regression for the subset_opt.

        lambda_ : float
            The value of lambda corresponds to the subset_opt.

        run_time : float
            The time taken to execute COMBSS on the dynamic grid.
        
        lambda_list : list 
            The list of lambda values of the dynamic grid.
            
        subset_list : list
            The list subsets obtained by COMBSS on the dynamic grid of lambda values. For each i, subset_list[i] corresponds to the lambda_list[i].

        """
        print("Fitting the model ...")
        result = olm.bss(X_train, y_train, X_val, y_val, 
                         t_init=t_init, 
                         q = q, 
                         scaling=scaling, 
                         tau=tau, 
                         delta_frac=delta_frac, 
                         nlam = nlam, 
                         eta=eta, 
                         patience=patience, 
                         gd_maxiter=gd_maxiter, 
                         gd_tol=gd_tol, 
                         cg_maxiter = cg_maxiter, 
                         cg_tol=cg_tol)
        print("Fitting is complete")
        self.subset = result["subset"]
        self.mse = result["mse"]
        self.coef_ = result["coef"]
        self.lambda_ = result["lambda"]
        self.run_time = result["time"]
        self.subset_list = result["subset_list"]
        self.lambda_list = result["lambda_list"]

        return


